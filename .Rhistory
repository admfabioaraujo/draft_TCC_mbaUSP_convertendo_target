#... qual é o Produto Interno Bruto registrado em 1960 ?
options(scipen = 999)
predict(object = modelo_higienizado,
data.frame(adolescent_fertility = 89.88180,
gcf_percent_gdp = 17.52323,
net_official_assistence_usd = 39580002,
savings_carbon_percent_of_gni = 0.5876489,
savings_mineral_depletion_percent_of_gni = 0.1378949,
agricultural_raw_percent_of_merchandise_exports = 14.237061,
agricultural_raw_percent_of_merchandise_imports = 2.7826802),
interval = "confidence", level = 0.95) #_  fit: -126075332779   lwr: -315303773823  upr: 63153108266
dataset_higienizado_fe$y_Hat[1] #_ -126075007953
dataset_higienizado$gdp_current_usd[1] #_ 17030465539
#... qual é o Produto Interno Bruto registrado em 1974 ?
options(scipen = 999)
predict(object = modelo_higienizado,
data.frame(adolescent_fertility = 73.82800,
gcf_percent_gdp = 24.31146,
net_official_assistence_usd = 129809998,
savings_carbon_percent_of_gni = 0.5057826,
savings_mineral_depletion_percent_of_gni = 0.2198064,
agricultural_raw_percent_of_merchandise_exports = 5.991149,
agricultural_raw_percent_of_merchandise_imports = 2.0148768),
interval = "confidence", level = 0.95) #_  fit: 303229467078    lwr: 128649527043    upr: 477809407114
dataset_higienizado_fe$y_Hat[15] #_ 303229128520
dataset_higienizado$gdp_current_usd[15] #_ 109794519728
#... qual é o Produto Interno Bruto registrado em 1960 ?
options(scipen = 999)
predict(object = modelo_higienizado,
data.frame(adolescent_fertility = 89.88180,
gcf_percent_gdp = 17.52323,
net_official_assistence_usd = 39580002,
savings_carbon_percent_of_gni = 0.5876489,
savings_mineral_depletion_percent_of_gni = 0.1378949,
agricultural_raw_percent_of_merchandise_exports = 14.237061,
agricultural_raw_percent_of_merchandise_imports = 2.7826802),
interval = "confidence", level = 0.95) #_  fit: -126075332779   lwr: -315303773823  upr: 63153108266
dataset_higienizado_fe$y_Hat[1] #_ -126075007953
dataset_higienizado$gdp_current_usd[1] #_ 17030465539
#... qual é o Produto Interno Bruto registrado em 1974 ?
options(scipen = 999)
predict(object = modelo_higienizado,
data.frame(adolescent_fertility = 73.82800,
gcf_percent_gdp = 24.31146,
net_official_assistence_usd = 129809998,
savings_carbon_percent_of_gni = 0.5057826,
savings_mineral_depletion_percent_of_gni = 0.2198064,
agricultural_raw_percent_of_merchandise_exports = 5.991149,
agricultural_raw_percent_of_merchandise_imports = 2.0148768),
interval = "confidence", level = 0.95) #_  fit: 303229467078    lwr: 128649527043    upr: 477809407114
dataset_higienizado_fe$y_Hat[15] #_ 303229128520
dataset_higienizado$gdp_current_usd[15] #_ 109794519728
#... qual é o Produto Interno Bruto registrado em 1989 ?
options(scipen = 999)
predict(object = modelo_higienizado,
data.frame(adolescent_fertility = 82.54740,
gcf_percent_gdp = 26.90279,
net_official_assistence_usd = 232399994,
savings_carbon_percent_of_gni = 0.6703514,
savings_mineral_depletion_percent_of_gni = 0.26229659,
agricultural_raw_percent_of_merchandise_exports = 3.514469,
agricultural_raw_percent_of_merchandise_imports = 3.4280610),
interval = "confidence", level = 0.95) #_  fit: 164709531966     lwr: -132243242687    upr: 461662306618
dataset_higienizado_fe$y_Hat[30] #_ 164709783223
dataset_higienizado$gdp_current_usd[30] #_ 347028139590
#... qual é o Produto Interno Bruto registrado em 1998 ?
options(scipen = 999)
predict(object = modelo_higienizado,
data.frame(adolescent_fertility = 83.57800,
gcf_percent_gdp = 18.16475,
net_official_assistence_usd = 260609985,
savings_carbon_percent_of_gni = 0.6046420,
savings_mineral_depletion_percent_of_gni = 0.15656106,
agricultural_raw_percent_of_merchandise_exports = 3.763963,
agricultural_raw_percent_of_merchandise_imports = 2.1034568),
interval = "confidence", level = 0.95) #_  fit: 651759095987       lwr: 480217539844       upr: 823300652131
dataset_higienizado_fe$y_Hat[39] #_ 651758940451
dataset_higienizado$gdp_current_usd[39] #_ 863711007325
#... qual é o Produto Interno Bruto registrado em 2021 ?
options(scipen = 999)
predict(object = modelo_higienizado,
data.frame(adolescent_fertility = 62.93113,
gcf_percent_gdp = 18.91975,
net_official_assistence_usd = 241033332,
savings_carbon_percent_of_gni = 0.7082946,
savings_mineral_depletion_percent_of_gni = 0.25245396,
agricultural_raw_percent_of_merchandise_exports = 4.781218,
agricultural_raw_percent_of_merchandise_imports = 1.0468559),
interval = "confidence", level = 0.95) #_  fit: 1152938157036       lwr: 983117602231       upr: 1322758711840
dataset_higienizado_fe$y_Hat[62] #_ 1152938200169
dataset_higienizado$gdp_current_usd[62] #_  1608981220812
#... qual seria o Produto Interno Bruto com os seguintes números ?
options(scipen = 999)
predict(object = modelo_higienizado,
data.frame(adolescent_fertility = 68.00,
gcf_percent_gdp = 15.00,
net_official_assistence_usd = 300000000,
savings_carbon_percent_of_gni = 0.50,
savings_mineral_depletion_percent_of_gni = 0.80,
agricultural_raw_percent_of_merchandise_exports = 3.00,
agricultural_raw_percent_of_merchandise_imports = 1.00),
interval = "confidence", level = 0.95)
# Visualizando os dois fitted values no dataset modelos step_empresas e step_modelo_bc
dataset_higienizado_fe %>%
select(gdp_current_usd, y_Hat, eRRos) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 18)
# O mesmo somatório:
sum(dataset_higienizado_fe$gdp_current_usd) #_ 44215922922349
sum(dataset_higienizado_fe$y_Hat) #_ 44215922922349
44215922922349 - 44215922922349 #_ 0
sum(dataset_higienizado_fe$eRRos) #_ 0.0003681183
# O mesmo desvio-padrão:
sd(dataset_higienizado_fe$gdp_current_usd) #_ 780717043386
sd(dataset_higienizado_fe$y_Hat) #_ 735256380760
# A mesma média:
mean(dataset_higienizado_fe$gdp_current_usd) #_ 713160047135
sd(dataset_higienizado_fe$eRRos) #_ 262520773244
# A mesma média:
mean(dataset_higienizado_fe$gdp_current_usd) #_ 713160047135
mean(dataset_higienizado_fe$y_Hat) #_ 713160047135
713160047135 - 713160047135 #_ 0
mean(dataset_higienizado_fe$eRRos) #_ 0.000005926817
# Um dos resíduos de menor valor:
dataset_higienizado_fe %>% select(gdp_current_usd, y_Hat, eRRos) -> mn
mn[59,]
mn[59,]
## Configurando o diretório de trabalho:
getwd()
## Versão utilizada - https://cran.r-project.org/bin/windows/base/old/4.2.1/
R.version # version.string R version 4.2.1 (2022-06-23 ucrt)
## Configurando o diretório de trabalho:
getwd()
## Versão utilizada - https://cran.r-project.org/bin/windows/base/old/4.2.1/
R.version # version.string R version 4.2.1 (2022-06-23 ucrt)
## Carregando os pacotes inaugurais:
if(!require(pacman)) install.packages("pacman")
library(pacman)
pacman::p_load(dplyr, car, rstatix, lmtest, ggpubr,
QuantPsyc, psych, scatterplot3d)
## Carregando os demais pacotes:
pacotes <- c("readxl","Amelia","visdat", "e1071", "tidyverse","tidyr","car","rgl","scatterplot3",
"caret", "rpart", "janitor", "faraway","knitr","kableExtra","plotly","nortest","olsrr",
"jtools", "huxtable","stargazer", "ggplotly", "ggside",
"correlation","ggplot2","see","PerformanceAnalytics","ggraph","lmtest","MASS")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply (pacotes, require, character = T)
}
(.packages())
## Resgatando o dataset_higienizado:
load(file = "dataset_higienizado_fe.RData")
View(dataset_higienizado_fe)
options(scipen = 999)
View(dataset_higienizado_fe)
## Convertendo RData em XLSX:
install.packages("clipr")
library(clipr)
write_clip(dataset_higienizado_fe)
## Convertendo RData em XLSX:
library(clipr)
write_clip(dataset_higienizado_fe)
## Carregando o dataset convertido de RData para XLSX:
library("readxl")
higienizado_convertido <- read_excel("dataset_higienizado_fe_convertido_de_RData_para_MSExcel.xlsx", sheet = "enter+ctrlV")
View(higienizado_convertido) #_ shape original: 63 X 1443.
class(higienizado_convertido)
## Convertendo o objeto, de tibble para data-frame:
higienizado_convertido <- as.data.frame(higienizado_convertido)
class(higienizado_convertido)
## Convertendo todas as variáveis para num:
higienizado_convertido_2 <- higienizado_convertido
for(i in 1:ncol(higienizado_convertido)) {
higienizado_convertido_2[,i] <- as.numeric(higienizado_convertido_2[,i])
}
View(higienizado_convertido_2) #_ 62 X 1443
## Visualização e contagem por tipo de variáveis e dos valores ausentes:
library(Amelia)
library(visdat)
missmap(higienizado_convertido_2) #_ missing 53%
is.na.data.frame(higienizado_convertido_2)
any(is.na(higienizado_convertido_2)) #_ T há dados ausentes
sum(is.na(higienizado_convertido_2)) #_ 47647
sum(!is.na(higienizado_convertido_2)) #_ 41819
higienizado_convertido_3 <- higienizado_convertido_2
higienizado_convertido_3[2,52]
higienizado_convertido_3[52,2]
higienizado_convertido_3$gdp_current_usd <- NULL
View(higienizado_convertido_3)
higienizado_convertido_3$gdp_current_usd  <- higienizado_convertido_2$gdp_current_usd/1000000
higienizado_convertido_3[52,2]
higienizado_convertido_3[52,2]
higienizado_convertido_3 <- higienizado_convertido_2
higienizado_convertido_3[52,2] #_ 2616156606667
higienizado_convertido_3$gdp_current_usd <- NULL
higienizado_convertido_3$gdp_current_usd  <- higienizado_convertido_2$gdp_current_usd/1000000000
higienizado_convertido_3[52,2]
higienizado_convertido_3 <- higienizado_convertido_2
higienizado_convertido_3[52,2] #_ 2616156606667
higienizado_convertido_3$gdp_current_usd <- NULL
higienizado_convertido_3$gdp_current_usd  <- higienizado_convertido_2$gdp_current_usd/1000000000000000000
higienizado_convertido_3[52,2]
higienizado_convertido_3 <- higienizado_convertido_2
higienizado_convertido_3[52,2] #_ 2616156606667
higienizado_convertido_3$gdp_current_usd <- NULL
higienizado_convertido_3$gdp_current_usd  <- higienizado_convertido_2$gdp_current_usd/1000000000
higienizado_convertido_3[52,2]
View(higienizado_convertido_2) #_ 62 X 1443
higienizado_convertido_3 <- higienizado_convertido_2
higienizado_convertido_3[52,2] #_ 2616156606667
higienizado_convertido_3$gdp_current_usd <- NULL
higienizado_convertido_2$gdp_current_usd/1000000000
higienizado_convertido_3$gdp_current_usd  <- higienizado_convertido_2$gdp_current_usd/1000000000
higienizado_convertido_3[52,10]
higienizado_convertido_3[52,10]
## Alterando a escala da variável de interesse:
higienizado_convertido_3 <- higienizado_convertido_2
higienizado_convertido_3[52,2] #_ 2616156606667
higienizado_convertido_3$gdp_current_usd <- NULL
## Alterando a escala da variável de interesse:
library(dplyr)
## Alterando a escala da variável de interesse:
library(dplyr)
higienizado_convertido_3 <- higienizado_convertido_2
higienizado_convertido_3[52,2] #_ 2616156606667
higienizado_convertido_3$gdp_current_usd <- NULL
View(higienizado_convertido_3)
higienizado_convertido_3 <- higienizado_convertido_3 %>% mutate(gdp_current_usd = higienizado_convertido_2$gdp_current_usd/1000000000 )
View(higienizado_convertido_3)
chart.Correlation((higienizado_convertido_step[1:6]), histogram = TRUE) #_ gdp_current_usd X net_official_assistence_usd = 0.79
## Apresentação das distribuições das variáveis, scatters, valores das correlações e suas respectivas significâncias < 0,8:
library(PerformanceAnalytics)
chart.Correlation((higienizado_convertido_step[1:6]), histogram = TRUE) #_ gdp_current_usd X net_official_assistence_usd = 0.79
#Observando os parâmetros do modelo_tempodist
summary(modelo_convertido) #_ RSquared: 0.3055     R Adjusted: 0.2939
## Configurando o diretório de trabalho:
getwd()
## Listar os arquivos do nosso project
list.files()
## Versão utilizada - https://cran.r-project.org/bin/windows/base/old/4.2.1/
R.version # version.string R version 4.2.1 (2022-06-23 ucrt)
## Carregando os pacotes inaugurais:
if(!require(pacman)) install.packages("pacman")
library(pacman)
pacman::p_load(dplyr, car, rstatix, lmtest, ggpubr,
QuantPsyc, psych, scatterplot3d)
## Carregando os demais pacotes:
pacotes <- c("readxl","Amelia","visdat", "e1071", "tidyverse","tidyr","car","rgl","scatterplot3",
"caret", "rpart", "janitor", "faraway","knitr","kableExtra","plotly","nortest","olsrr",
"jtools", "huxtable","stargazer", "ggplotly", "ggside",
"correlation","ggplot2","clipr","see","PerformanceAnalytics","ggraph","lmtest","MASS")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply (pacotes, require, character = T)
}
(.packages())
## Resgatando o dataset_higienizado:
load(file = "dataset_higienizado.RData")
options(scipen = 999)
View(dataset_higienizado) # 62 X 8
View(dataset_higienizado) # 62 X 8
## Carregando o dataset convertido de RData para XLSX:
library("readxl")
higienizado_convertido <- read_excel("dataset_higienizado_convertido_de_RData_para_MSExcel.xlsx", sheet = "enter+ctrlV")
View(higienizado_convertido) #_ shape original: 62 X 8
View(higienizado_convertido) #_ shape original: 62 X 8
## Convertendo o objeto, de tibble para data-frame:
higienizado_convertido <- as.data.frame(higienizado_convertido)
class(higienizado_convertido)
## Convertendo todas as variáveis para num:
higienizado_convertido_2 <- higienizado_convertido
for(i in 1:ncol(higienizado_convertido)) {
higienizado_convertido_2[,i] <- as.numeric(higienizado_convertido_2[,i])
}
View(higienizado_convertido_2) #_ 62 X 8
## Alterando a grandeza da variável de interesse:
library(dplyr)
higienizado_convertido_3 <- higienizado_convertido_2
higienizado_convertido_3[52,2] #_ 2616156606667
higienizado_convertido_3[1,2] #_ 2616156606667
higienizado_convertido_3$gdp_current_usd <- NULL
higienizado_convertido_3 <- higienizado_convertido_3 %>% mutate(gdp_current_usd = higienizado_convertido_2$gdp_current_usd/1000000000 )
View(higienizado_convertido_3)
higienizado_convertido_3 <- higienizado_convertido_3 %>%
relocate(gdp_current_usd, .after = adolescent_fertility)
View(higienizado_convertido_3)
higienizado_convertido_3[52,2] #_ 2616.157
higienizado_convertido_3[1,2] #_ 2616.157
higienizado_convertido_3[1,2] #_ 170304.7
options(scipen = 999)
View(higienizado_convertido_3)
## Salvando o dataset sem valores ausentes:
save(higienizado_convertido_3, file = "higienizado_convertido_3.RData") #_ 62 X 483
file.info("higienizado_convertido_3")
load(file = "higienizado_convertido_3.RData")
View(higienizado_convertido_3)
## Gerando um bloxplot da variável dependente:
options(scipen = 999)
dev.off()
library(ggplot2)
library(plotly)
library(tibble)
ggplotly(
ggplot(higienizado_convertido_3,aes(x = "", y = gdp_current_usd)) +
geom_boxplot(fill = "deepskyblue",    # cor da caixa
alpha = 0.7,             # transparência
color = "black",         # cor da borda
outlier.colour = "red",  # cor dos outliers
outlier.shape = 15,      # formato dos marcadores dos outliers
outlier.size = 1.5) +    # tamanho dos marcadores dos outliers
geom_jitter(width = 0.1, alpha = 0.3, size = 2.0, color = "darkorchid") +
labs(y = "Real_Values_USD") +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position="none",
plot.title = element_text(size=15)) +
ggtitle("Boxplot da variável de interesse - Gross Domestic Product") +
xlab("")
)
# Criando um gráfico kernel density estimation (KDE) - função densidade de probabilidade da
# variável dependente com histograma
dev.off()
ggplotly(
ggplot(higienizado_convertido_3, aes(x = gdp_current_usd)) +
geom_density(aes(x = gdp_current_usd),
position = "identity", color = "black", size = 1) +
geom_histogram(aes(y = ..density..), color = "white", fill = "deepskyblue",
bins = 30) +
theme_classic()
)
## Confirmando a ausência de correlações acima de 0.8:
higienizado_convertido_3_no_target <- higienizado_convertido_3
higienizado_convertido_3_no_target$gdp_current_usd <- NULL
View(higienizado_convertido_3_no_target) #_ shape 62 X 7
correlation <- cor(higienizado_convertido_3_no_target)
library(caret)
findCorrelation(correlation, cutoff = 0.80, verbose = T, names = T)
## Confirmando a ausência de variáveis inflacionadas:
View(higienizado_convertido_3)
lm_convertido <- lm(higienizado_convertido_3$gdp_current_usd ~., data = higienizado_convertido_3)
summary(lm_convertido) #_ R Squared = 0.3787   R Adjusted = 0.2982
library(car)
vif(lm_convertido)  #_ variáveis entre 1.02 e 1.27
## Seleção de variáveis com a função stepwise:
library(dplyr)
library(MASS)
step_convertido <- step(lm_convertido, direction = "both")
summary(step_convertido) #_ R Squared = 0.8869   R Adjusted = 0.8723
summary(step_convertido) #_ R Squared = 0.8869   R Adjusted = 0.8723
## Criando um dataset com a variável target e as varíáveis explicativas estatisticamente significantes, abaixo de 0.05:
higienizado_convertido_step <- higienizado_convertido_3
higienizado_convertido_step <- higienizado_convertido_3 %>% dplyr::select(c(2,6))
View(higienizado_convertido_step) #_ shape 62 X 2
## Salvando o dataset com as variáveis escolhidas pelo procedimento stepwise:
save(higienizado_convertido_step, file = "higienizado_convertido_step.RData")
file.info("higienizado_convertido_step")
load(file = "higienizado_convertido_step.RData")
## Salvando o modelo gerado com dataset sem correlações acima de 0.8 e sem variáveis inflacionadas acimda de 10:
save(lm_convertido, file = "lm_convertido.RData")
load(file = "lm_convertido.RData")
## Calculando o sumário, agrupamento, somatória, skewness, kurtosis, moda, desvio padrão, quartis e range da variável target:
GDP_summarise <- summarise(higienizado_convertido_step,
observações=n(),
média=mean(`gdp_current_usd`),
mediana=median(`gdp_current_usd`),
desv_pad=sd(`gdp_current_usd`),
mínimo=min(`gdp_current_usd`),
máximo=max(`gdp_current_usd`),
quartil_3=quantile(`gdp_current_usd`, type=5, 0.75))
options(scipen = 999)
View(GDP_summarise)
print(GDP_summarise)
library(e1071)
skewness(higienizado_convertido_step$gdp_current_usd) #_ 0.9221445 - o coeficiente indica assimetria positiva, à direita, sendo a moda > média
kurtosis(higienizado_convertido_step$gdp_current_usd) #_ -0.1895701 - o coeficiente indica  alto grau de achatamento, a distribuição é platicúrtica
kurtosis(higienizado_convertido_step$gdp_current_usd) #_ -0.1895701 - o coeficiente indica grau de achatamento, a distribuição é platicúrtica
var(higienizado_convertido_step$gdp_current_usd) #_ 72622876429
sum(higienizado_convertido_step$gdp_current_usd) #_ 16253914
library(tidyverse)
library(tidyr)
options(scipen = 999)
quantile((higienizado_convertido_step$gdp_current_usd), probs = c(0.01, 0.99))
quantile((higienizado_convertido_step$gdp_current_usd), seq(from = 0, to = 1, by = 0.20))
IQR(higienizado_convertido_step$gdp_current_usd) #_ diferença entre q3 e q1
range(higienizado_convertido_step$gdp_current_usd)
diff(range(higienizado_convertido_step$gdp_current_usd))
summary(higienizado_convertido_step)
# Criando e salvando o gráfico Box Plot de todas as variáveis:
higienizado_convertido_step_scaled <- as.data.frame(scale(higienizado_convertido_step[,1:2]))
View(higienizado_convertido_step_scaled)
outliers_geral <- higienizado_convertido_step_scaled
outliers_geral <- lapply(outliers_geral, function(x) boxplot.stats(x)$out)
options(scipen = 999)
print(outliers_geral)
library(dplyr)
glimpse(outliers_geral) #_ list
class(outliers_geral)
statisc_list <- list() # lista vazia
dev.off()
for (i in seq_along(higienizado_convertido_step_scaled)) {
statisc_list[[i]] <- boxplot.stats(higienizado_convertido_step_scaled[[i]])$stats[2]
}
boxplot(higienizado_convertido_step_scaled, col="deepskyblue") -> boxplot_higienizado
points(1:length(statisc_list), statisc_list, col="red") -> boxplot_higienizado
axis(side = 1, at = 1:ncol(dataset_higienizado), labels = colnames(dataset_higienizado)) -> boxplot_higienizado
title(main = "Gráfico Boxplot do dataset convertido - shape 62 X 2") -> boxplot_higienizado
## Visualização do dataset_convertido:
library(dplyr)
library(knitr)
library(kableExtra)
dev.off()
options(scipen = 999)
higienizado_convertido_step %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 14)
## Visualizando as observações e as especificações referentes às variáveis do dataset
glimpse(higienizado_convertido_step)
## Estatísticas univariadas:
summary(higienizado_convertido_step)
## Gráfico de dispersão
ggplotly(
ggplot(higienizado_convertido_step, aes(x = gdp_current_usd, y = savings_mineral_depletion_percent_of_gni)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"),
method = "lm", se = F, size = 2) +
xlab("gdp_current_usd") +
ylab("savings_mineral_depletion_percent_of_gni") +
scale_color_manual("Legenda:",
values = "grey50") +
theme_classic()
)
## Estimando o modelo para regressão linear simples
modelo_convertido <- lm(formula = gdp_current_usd ~ savings_mineral_depletion_percent_of_gni,
data = higienizado_convertido_step)
#Observando os parâmetros do modelo_tempodist
summary(modelo_convertido) #_ RSquared: 0.3055     R Adjusted: 0.2939
#Outras maneiras de apresentar os outputs do modelo, com afunção summ do pacote jtools
summ(modelo_convertido, confint = T, digits = 4, ci.width = .95)
export_summs(modelo_convertido, scale = F, digits = 4)
#Salvando fitted values (variável yhat) e residuals (variável erro) no dataset
higienizado_convertido_step$yhat <- modelo_convertido$fitted.values
higienizado_convertido_step$erro <- modelo_convertido$residuals
## Visualizando a base de dados com as variáveis yhat e erro
higienizado_convertido_step %>%
select(gdp_current_usd, yhat, yhat, erro) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
## Plotando o Intervalo de Confiança de 90%
ggplotly(
ggplot(higienizado_convertido_step, aes(x = gdp_current_usd, y = savings_mineral_depletion_percent_of_gni)) +
geom_point(color = "#39568CFF") +
geom_smooth(aes(color = "Fitted Values"),
method = "lm",
level = 0.95,) +
labs(x = "gdp_current_usd",
y = "savings_mineral_depletion_percent_of_gni") +
scale_color_manual("Legenda:",
values = "grey50") +
theme_bw()
)
## Calculando os intervalos de confiança
confint(modelo_convertido, level = 0.95) # siginificância 5%
## Fazendo predições em modelos OLS - e.g.: qual seria o PIB, em média,
## para um savings_mineral_depletion_percent_of_gni de: 0.14421674 [12,2]
predict(object = modelo_convertido,
data.frame(savings_mineral_depletion_percent_of_gni = 0.1442167),
interval = "confidence", level = 0.95)
higienizado_convertido_step[12,1] #_ 488698.3
sum(higienizado_convertido_step$gdp_current_usd)
sum(higienizado_convertido_step$yhat)
pairs.panels(higienizado_convertido_step[1:2],
smooth = TRUE,
lm = TRUE,
scale = FALSE,
density = TRUE,
ellipses = FALSE,
method = "pearson",
pch = 1,
cor = TRUE,
hist.col = "aquamarine",
breaks = 12,
stars = T,
ci = TRUE, alpha = 0.05)
plot(higienizado_convertido_step)
## Análise gráfica do modelo_higienizado:
dev.off()
par(mfrow=c(2,2))
plot(higienizado_convertido_step)
# PRESSUPOSTO 1 - normalidade dos resíduos _
# ..Shapiro Francia
# h0: distribuição dos dados é normal (p > 0,05);
# h1: distribuição dos dados não é normal (p <= 0,05)
library(nortest)
sf.test(higienizado_convertido_step) #_ p-value = 0.9251 > 0,05 - distribuição é normal
sf.test(lm_convertido$residuals) #_ p-value = 0.9251 > 0,05 - distribuição é normal
